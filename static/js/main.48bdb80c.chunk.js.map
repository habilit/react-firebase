{"version":3,"sources":["logo.svg","reducers/todosReducer.js","reducers/rootReducer.js","reducers/simpleReducer.js","firebase.js","actions/todoAction.js","components/MyList.js","actions/simpleAction.js","containers/Home.js","containers/About.js","App.js","serviceWorker.js","index.js","store.js"],"names":["module","exports","__webpack_require__","p","todos","state","arguments","length","undefined","action","type","concat","Object","toConsumableArray","id","text","completed","console","log","map","todo","objectSpread","payload","combineReducers","simpleReducer","result","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","todosRef","ref","child","fetchToDos","_ref3","asyncToGenerator","regenerator_default","a","mark","_callee3","dispatch","wrap","_context3","prev","next","isFetching","on","snapshot","val","stop","_x3","apply","this","MyList","showForm","formValue","inputChange","e","_this","setState","target","value","formSubmit","addToDo","props","preventDefault","title","renderForm","react_default","createElement","onSubmit","onChange","htmlFor","_","isNil","lib","data","dataField","isKey","renderToDo","Component","connect","key","simpleAction","item","newToDo","_ref","_callee","_context","push","set","_x","Home","components_MyList","About","App","event","render","react_router_dom","className","href","rel","onClick","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","es","store","initialState","createStore","rootReducer","applyMiddleware","thunk","configureStore","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48bdb80c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const todos = (state = [], action) => {\n    switch (action.type) {\n        case 'ADD_TODO':\n            return [\n                ...state,\n                {\n                    id: action.id,\n                    text: action.text,\n                    completed: false\n                }\n            ]\n        case 'IS_FETCHING_TODOS':\n            console.log('state in reducer IS_FETCHING_TODOS')\n            console.log(state)\n            //return state\n        case 'TOGGLE_TODO':\n            return state.map(todo =>\n                todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\n            )\n        case 'FETCH_TODOS':\n            console.log('state FETCH_TODOS');\n            console.log(state);\n            return action.payload;\n        default:\n            return state\n    }\n};\n\nexport default todos;","import { combineReducers } from 'redux';\nimport simpleReducer from './simpleReducer';\nimport todos from './todosReducer';\nexport default combineReducers({\n    simpleReducer,\n    todos,\n});","\nexport default (state = {}, action) => {\n    switch (action.type) {\n        case 'SIMPLE_ACTION':\n            return {\n                result: action.payload\n            }\n        default:\n            return state\n    }\n}","import * as firebase from 'firebase';\nvar firebaseConfig = {\n    apiKey: \"AIzaSyA21E8beG20N75_LYoOiMFcv-zbrR03QiY\",\n    authDomain: \"boss-bitch.firebaseapp.com\",\n    databaseURL: \"https://boss-bitch.firebaseio.com\",\n    projectId: \"boss-bitch\",\n    storageBucket: \"boss-bitch.appspot.com\",\n    messagingSenderId: \"950209419705\",\n    // appId: \"1:950209419705:web:355c238bb8bc95a5\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst databaseRef = firebase.database().ref();\nexport const todosRef = databaseRef.child(\"todos\");","import {todosRef} from '../firebase';\nconst FETCH_TODOS = 'FETCH_TODOS';\nconst IS_FETCHING_TODOS = 'IS_FETCHING_TODOS';\n\nexport const addToDo = newToDo => async dispatch => {\n    todosRef.push().set(newToDo);\n};\nexport const completeToDo = completeToDo => async dispatch => {\n    todosRef.child(completeToDo).remove();\n};\nexport const fetchToDos = () => async dispatch => {\n    dispatch({\n        type: IS_FETCHING_TODOS,\n        payload: {\n            isFetching: true\n        }\n    });\n    todosRef.on(\"value\", snapshot => {\n\n        dispatch({\n            type: FETCH_TODOS,\n            payload: snapshot.val()\n        });\n    });\n};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport { simpleAction } from '../actions/simpleAction';\nimport {fetchToDos, addToDo} from \"../actions/todoAction\";\n\nclass MyList extends Component {\n    state = {\n        showForm: false,\n        formValue: \"\"\n    };\n\n    inputChange = e => {\n        this.setState({formValue: e.target.value});\n    };\n\n    formSubmit = e => {\n        const {formValue} = this.state;\n        const {addToDo} = this.props;\n        e.preventDefault();\n        addToDo({title: formValue});\n        this.setState({formValue: \"\"});\n    };\n\n   componentWillMount() {\n       this.props.fetchToDos();\n    }\n\n    renderForm = () => {\n        const {formValue} = this.state;\n            return (\n                <div>\n                    <form onSubmit={this.formSubmit}>\n                        <div>\n                            <i>add</i>\n                            <input\n                                value={formValue}\n                                onChange={this.inputChange}\n                                id=\"toDoNext\"\n                                type=\"text\"\n                            />\n                            <label htmlFor=\"toDoNext\">What Next?</label>\n                        </div>\n                    </form>\n                </div>\n            );\n    };\n\n    renderToDo() {\n        const { todos } = this.props;\n        if (_.isNil(todos)) {\n            return (\n                <div>\n                    <h4>You have no more things ToDo!</h4>\n                </div>\n            );\n        }\n        return (\n            <BootstrapTable data={ todos }>\n                <TableHeaderColumn dataField='id' isKey>ID</TableHeaderColumn>\n                <TableHeaderColumn dataField='title'>Title</TableHeaderColumn>\n            </BootstrapTable>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <div>{this.renderForm()}</div>\n                <div>{this.renderToDo()}</div>\n            </div>\n\n        );\n    }\n\n}\n\nconst mappedData = (data) => {\n    return _.map(data, (value, key) => {\n            return {\n                id: key,\n                title: value.title\n            }\n    })\n};\n\nconst mapStateToProps = state => {\n    console.log('--state--');\n    console.log(state);\n    return {\n        todos: mappedData(state.todos),\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n    simpleAction: () => dispatch(simpleAction()),\n    fetchToDos: () => dispatch(fetchToDos()),\n    addToDo: (item) => dispatch(addToDo(item)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyList);\n\n\n","export const simpleAction = () => ({\n    type: \"HELLO_REACT\"\n})","import React, { Component } from 'react';\nimport MyList from '../components/MyList';\n\nclass Home extends Component {\n    render() {\n        return (\n        <div>\n            <h1>HOME!</h1>\n            <MyList />\n        </div>);\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\n\nclass About extends Component {\n    render() {\n        return (\n        <div>\n            <h1>About...</h1>\n        </div>);\n    }\n}\n\nexport default About; // Don’t forget to use export default!","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { simpleAction } from './actions/simpleAction';\nimport Home from './containers/Home';\nimport About from './containers/About';\nimport logo from './logo.svg';\nimport './App.css';\nimport {fetchToDos} from \"./actions/todoAction\";\n\nclass App extends Component {\n    simpleAction = (event) => {\n        this.props.simpleAction();\n        this.props.fetchToDos();\n    }\n\n    render = () => {\n        return (\n            <Router>\n                <div>\n                    <header className=\"App-header\">\n                        <p>\n                            Edit <code>src/App.js</code> and save to reload.\n                        </p>\n                        <a\n                            className=\"App-link\"\n                            href=\"https://reactjs.org\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            Learn React\n                        </a>\n                        <button onClick={this.simpleAction}>Test redux action</button>\n                    </header>\n                    <Route exact path=\"/\" component={Home}/>\n                    <Route path=\"/about\" component={About}/>\n                </div>\n            </Router>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => ({\n    ...state\n});\n\nconst mapDispatchToProps = dispatch => ({\n    simpleAction: () => dispatch(simpleAction()),\n    fetchToDos: () => dispatch(fetchToDos()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\n\nexport default function configureStore(initialState={}) {\n    return createStore(\n        rootReducer,\n        initialState,\n        applyMiddleware(thunk)\n    );\n}"],"sourceRoot":""}